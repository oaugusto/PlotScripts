data <- data.frame(
name=letters[1:5],
value=sample(seq(4,15),5),
sd=c(1,0.2,3,2,4))
ggplot(data) +
geom_bar( aes(x=name, y=value), stat="identity", fill="skyblue", alpha=0.7) +
geom_errorbar( aes(x=name, ymin=value-sd, ymax=value+sd), width=0.4, colour="orange", alpha=0.9, size=1.3)
ggplot(data) +
geom_bar( aes(x=name, y=value), stat="identity", fill="skyblue", alpha=0.5) +
geom_crossbar( aes(x=name, y=value, ymin=value-sd, ymax=value+sd), width=0.4, colour="orange", alpha=0.9, size=1.3)
ggplot(data) +
geom_bar( aes(x=name, y=value), stat="identity", fill="skyblue", alpha=0.5) +
geom_linerange( aes(x=name, ymin=value-sd, ymax=value+sd), colour="orange", alpha=0.9, size=1.3)
ggplot(data) +
geom_bar( aes(x=name, y=value), stat="identity", fill="skyblue", alpha=0.5) +
geom_pointrange( aes(x=name, y=value, ymin=value-sd, ymax=value+sd), colour="orange", alpha=0.9, size=1.3)
ggplot(data) +
geom_errorbarh( aes(y=name, xmin=value-sd, xmax=value+sd), width=0.4, colour="orange", alpha=0.9, size=1.3)
ggplot(data) +
geom_bar( aes(x=name, y=value), stat="identity", fill="skyblue", alpha=0.5) +
geom_errorbar( aes(x=name, ymin=value-sd, ymax=value+sd), width=0.4, colour="orange", alpha=0.9, size=1.3) +
coord_flip()
library(ggplot2)
install(ggplot2)
install.packages(ggplot2)
"ggplot2"
install.packages(ggplot2)
install.packages(ggplot)
install.packages(ggplot)
install.packages("ggplot2")
install.packages(c("Hmisc", "lsr", "tigerstats"))
library(datasets)
head(iris)
summary(iris)
plot(iris)
help("summary")
help("head")
plot(iris)
plot(iris$Species)
plot(iris$Petal.Length)
plot(iris$Species, iris$Petal.Width)
barplot(iris$Species, iris$Sepal.Width)
n <- 10
n
n
n <- c(10, 10)
n
n[0]
n(0)
aux = combn(x = 1:1024, m = 2)
aux1 = combn(x = rev(1:1024), m =2)
View(aux1)
pairs = c(aux, aux1)
fadfal
fklejls
diamonds
hist(diamonds)
library(ggplot2)
ggplot(diamonds)
ggplot(diamonds, aes(x=carat))  # if only X-axis is known. The Y-axis can be specified in respective geoms.
ggplot(diamonds)
ggplot(diamonds, aes(x=carat))  # if only X-axis is known. The Y-axis can be specified in respective geoms.
show(diamonds)
ggplot(diamonds, aes(x=carat, y=price))
ggplot(diamonds, aes(x=carat, color=cut))  # Each category of the 'cut' variable will now have a distinct  color, once a geom is added.
ggplot(diamonds, aes(x=carat, y=price, color=cut)) + geom_point() + geom_smooth() # Adding scatterplot geom (layer1) and smoothing geom (layer2).
ggplot(diamonds, aes(x=carat, y=price, color=cut)) + geom_point() + geom_smooth() # Adding scatterplot geom (layer1) and smoothing geom (layer2).
ggplot(diamonds) + geom_point(aes(x=carat, y=price, color=cut))
ggplot(diamonds) + geom_point(aes(x=carat, y=price, color=cut)) + geom_smooth(aes(x=carat, y=price, color=cut)) # Same as above but specifying the aesthetics inside the geoms.
ggplot(diamonds, aes(x=carat, y=price, color=cut)) + geom_point() + geom_smooth() # Adding scatterplot geom (layer1) and smoothing geom (layer2).
ggplot(diamonds) + geom_point(aes(x=carat, y=price, color=cut)) + geom_smooth(aes(x=carat, y=price, color=cut)) # Same as above but specifying the aesthetics inside the geoms.
ggplot(diamonds, aes(x=carat, y=price)) + geom_point(aes(color=cut)) + geom_smooth()  # same but simpler
# Answer to the challenge.
ggplot(diamonds, aes(x=carat, y=price, color=cut, shape=color)) + geom_point()
#setwd("C:/Users/oaugusto/Desktop/Plots/CBNet")
setwd("/home/oaugusto/CBNet/PlotsScripts/CBNet")
library(ggplot2)
library(gridExtra)
library(tidyverse)
library(plyr)
# setup
options(scipen = 999)
theme_set(theme_bw())
total_work.table <- read.csv("./csv_data/facebook_pfab/total_work.csv")
makespan.table <-read.csv("./csv_data/facebook_pfab/total_time.csv")
clusters.table <-read.csv("./csv_data/facebook_pfab/cluster.csv")
throughput.table <-read.csv("./csv_data/facebook_pfab/throughput.csv")
#COLORS
cbn_color = "#325387"
cbn1 = "#325387"
cbn2 = "#325387"
sn_color = "#021C02"
sn1 = "#1A361A"
sn2 = "#021C02"
dsn_color = "#B53131"
dsn1 = "#CF4F4F"
dsn2 = "#B53131"
opt_color = "#87C8E6"
opt1 = "#BEDCEB"
opt2 = "#87C8E6"
bt_color = "#555555"
bt1 = "#555555"
bt2 = "#555555"
makespan.table["abb"] <- revalue(makespan.table$project,
c("cbnet" = "cbn",
"splaynet" = "sn",
"displaynet" = "dsn"))
makespan.table$abb <- factor(makespan.table$abb, levels = c("cbn", "sn", "dsn"))
# Init Ggplot Base Plot
makespan.plot <- ggplot(makespan.table, aes(x = abb, y = value, color = abb)) +
geom_boxplot(size = 1.5) +
facet_grid(. ~ dataset)
# Modify theme components -------------------------------------------
makespan.plot <- makespan.plot + theme(text = element_text(size = 20),
plot.title = element_blank(),
plot.subtitle = element_blank(),
plot.caption = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_text(size = 25),
axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20),
legend.title = element_blank(),
legend.position = c(0.85, 0.5))
makespan.plot <- makespan.plot + theme(panel.grid.minor = element_blank(),
panel.grid.major = element_blank()) +
labs(y = expression(paste("#Rounds x ", 10^{5}))) +
scale_color_manual(values = c(cbn_color, sn_color, dsn_color)) +
scale_y_continuous(labels = function(x){paste0(x/100000)})
plot(makespan.plot)
IMG_height = 2.5
IMG_width = 7
ggsave(filename = "./plots/facebook_pfab/makespan.pdf", units = "cm",
plot = makespan.plot, device = "pdf",  width = IMG_width, height = IMG_height, scale = 4.0)
